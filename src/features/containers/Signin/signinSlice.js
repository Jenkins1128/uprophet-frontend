import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

const initialState = {
	isSignedIn: false,
	status: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk('signin/status', async (url, { rejectWithValue }) => {
	try {
		const response = await fetch(url);
		// The value we return becomes the `fulfilled` action payload

		return response.data;
	} catch (err) {
		return rejectWithValue(err.response.data);
	}
});

export const signinSlice = createSlice({
	name: 'signin',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		//signin: (state, { payload }) => {
		// Redux Toolkit allows us to write "mutating" logic in reducers. It
		// doesn't actually mutate the state because it uses the Immer library,
		// which detects changes to a "draft state" and produces a brand new
		// immutable state based off those changes
		//state.isSignedIn = payload;
		//}
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(loginAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(loginAsync.fulfilled, (state) => {
				state.status = 'success';
				state.isSignedIn = true;
			})
			.addCase(loginAsync.rejected, (state) => {
				state.status = 'rejected';
			});
	}
});

// The function below is called a selector and allows us to select a isSignedIn from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.isSignedIn)`
export const selectSigninState = (state) => state.signin.isSignedIn;

// export function submitSignInForm() {
// 	return async (dispatch, getState) => {
// 		try {
// 			const response = await submitLogin();

// 			console.log('hello');
// 			dispatch(signin(true));
// 		} catch {
// 			console.error('Error submitting the form');
// 		}
// 	};
// }

export default signinSlice.reducer;
