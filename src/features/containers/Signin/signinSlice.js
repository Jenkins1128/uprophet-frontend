import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

const initialState = {
	status: 'idle',
	isIn: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk('signin/status', async (data, { rejectWithValue }) => {
	const { url, username, password } = data;
	console.log(url, username, password);
	try {
		const response = await fetch(url, {
			method: 'POST',
			credentials: 'include',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				username,
				password
			})
		});

		if (response.status === 401) {
			throw new Error('Username or password is incorrect.');
		}
		// The value we return becomes the `fulfilled` action payload
		return response.status;
	} catch (err) {
		return rejectWithValue(err.response.data);
	}
});

export const signinSlice = createSlice({
	name: 'signin',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		//isStillSignedIn: (state, { payload }) => {
		// Redux Toolkit allows us to write "mutating" logic in reducers. It
		// doesn't actually mutate the state because it uses the Immer library,
		// which detects changes to a "draft state" and produces a brand new
		// immutable state based off those changes
		//state.isSignedIn = payload;
		//}
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(loginAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(loginAsync.fulfilled, (state) => {
				state.status = 'success';
				state.isIn = true;
			})
			.addCase(loginAsync.rejected, (state) => {
				state.status = 'rejected';
			});
	}
});

// export const { isStillSignedIn } = signinSlice.actions;

// The function below is called a selector and allows us to select a isSignedIn from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.isSignedIn)`
export const selectIsInState = (state) => state.signin.isIn;

export default signinSlice.reducer;
